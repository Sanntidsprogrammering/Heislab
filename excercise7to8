with Ada.Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Float_Random;
use Ada.Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Float_Random;

-- (Ada tabs = 3 spaces)

procedure exercise7 is

   Count_Failed : exception; -- Exception to be raised when counting fails
   Gen : Generator; -- Random number generator

   protected type Transaction_Manager (N : Positive) is
      entry Finished;
		entry Wait_until_aborted;
      function Commit return Boolean;
      procedure Signal_Abort;
   private
      Finished_Gate_Open : Boolean := False;
      Aborted : Boolean := False;
      Will_Commit : Boolean := True;
   end Transaction_Manager;
   protected body Transaction_Manager is

      entry Finished when Finished_Gate_Open or Finished'Count = N is
      begin
         ------------------------------------------
			if finished'count = N-1 then
				Finished_gate_open := true;
			elsif finished'count = 0 then
				Finished_gate_open := false;
			end if;
         ------------------------------------------
      end Finished;

		entry Wait_until_aborted when aborted is
		begin
			if Wait_until_aborted'count = 0 then
				aborted := false;
			end if;
		end Wait_until_aborted;

      procedure Signal_Abort is
      begin
         Aborted := True;
      end Signal_Abort;

      function Commit return Boolean is
      begin
         return Will_Commit;
      end Commit;

		function getAborted return boolean is
		begin
			return aborted;
		end getAborted;

   end Transaction_Manager;



   
   function Unreliable_Slow_Add (x : Integer) return Integer is
   Error_Rate : Constant := 0.15; -- (between 0 and 1)
   begin
      -------------------------------------------
		if random(gen)>error_rate then
			delay duration(4.0*random(gen));
      	return x+10;
		else
			delay duration(0.5);
			raise count_failed;
		end if;
      -------------------------------------------
   end Unreliable_Slow_Add;




   task type Transaction_Worker (Initial : Integer; Manager : access Transaction_Manager);
   task body Transaction_Worker is
      Num : Integer := Initial;
      Prev : Integer := Num;
      Round_Num : Integer := 0;
   begin
      Put_Line ("Worker" & Integer'Image(Initial) & " started");

      loop
         Put_Line ("Worker" & Integer'Image(Initial) & " started round" & Integer'Image(Round_Num));
         Round_Num := Round_Num + 1;

         ---------------------------------------
			
			select
				Manager.Wait_until_Aborted;
					num := num + 5;
			then abort
				begin
     	   		num := Unreliable_Slow_Add(prev);
				exception
					when count_failed =>
						Manager.Signal_abort;
				end;
			end select;
			manager.finished;
         ---------------------------------------
         
         if Manager.Commit = True then
            Put_Line (" Worker" & Integer'Image(Initial) & " comitting" & Integer'Image(Num));
         else
            Put_Line (" Worker" & Integer'Image(Initial) &
                      " reverting from" & Integer'Image(Num) &
                      " to" & Integer'Image(Prev));
            -------------------------------------------
            num := prev; -- back to checkpoint
            -------------------------------------------
         end if;

         Prev := Num;
         delay 0.5;

      end loop;
   end Transaction_Worker;

   Manager : aliased Transaction_Manager (3);

   Worker_1 : Transaction_Worker (0, Manager'Access);
   Worker_2 : Transaction_Worker (0, Manager'Access);
   Worker_3 : Transaction_Worker (0, Manager'Access);

begin
   Reset(Gen); -- Seed the random number generator
end exercise7;
