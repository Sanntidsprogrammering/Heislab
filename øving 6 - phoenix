package main

import (
	"net"
	."fmt"
	"time"
	"strings"
	"strconv"
	"os/exec"
)

var myIP string
var backup int

func checkError(err error,str string){
        if err != nil{
                Println("Error in "+str)
        }
}

func write(conn net.Conn, msg string){
        data := []byte(msg)
	conn.Write(data)

}

func read(conn net.UDPConn){
        for {
                data := make([]byte, 1024)
                _, _, err := conn.ReadFromUDP(data)
                        checkError(err,"read()")
                Println(string(data))
        }
}

func getMyIP() string{
	con1, _ := net.Dial("tcp", "google.com:http")
	myIP := con1.LocalAddr().String()
	str := strings.Split(myIP,":")
	myIP = str[0]
	con1.Close()
	return myIP
}

func main(){

	myIP = ""
	myBroadIP := "129.241.187.255"
	backup = 1

// find my ip
	myIP = getMyIP()
	Println(myIP)

//backup routine

	lstnAddr, _ := net.ResolveUDPAddr("udp",":20011")
	lstnConn, _ := net.ListenUDP("udp",lstnAddr) //oppretter UDP lytte-connection   

	for {
		data := make([]byte, 1024)
        	t := time.Now().Add(2000*time.Millisecond) //lager timestruct for nå+2000 millisek
		lstnConn.SetReadDeadline(t) //setter deadline på lstnConn
        	_, remoteAddr, err := lstnConn.ReadFromUDP(data)
        	if(err != nil){
        		//Err := strings.Split(err.Error(),"i/o ") //splitter feilmeldingen ved "i/o "
        		//if(Err[len(Err)-1][0:len("timeout")] == "timeout"){ //feil pga "timeout"?
         		lstnConn.Close()
         		break
         		//}
        	}
        	Msg := strings.Split(string(data),"\x00") //lager et array av dataen som splittes ved nullterminering \x00
        	msgString := Msg[0]
		msgInt,_ := strconv.Atoi(msgString)
        	//if (backup != msgInt){
        	backup = msgInt
        	Println("backup er nå: ",backup," (sendt fra: ",remoteAddr.IP.String()," )")
       		//}
	}
    

//master routine
	cmd := exec.Command("mate-terminal", "-x", "go", "run", "phoenix.go")
	cmd.Run()
	broadIP := myBroadIP+":20011"
	broadConn,_ := net.Dial("udp",broadIP)
	write(broadConn, strconv.Itoa(backup))
	time.Sleep(500*time.Millisecond)
    
	for{
		Println(backup)
		write(broadConn,strconv.Itoa(backup))
		backup=backup+1
		time.Sleep(500*time.Millisecond)
	}

}
